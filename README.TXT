# Data Structures & Algorithms — Collections Library 🧱

A collection of foundational data structures and algorithms implemented from scratch in Java.  
This project was built as part of my high school computer science coursework, but I took it further to deeply understand the internals of key abstractions used across computer science.

## 🛠️ Language & Tools
- Java
- BlueJ (educational IDE)
- CLI-based testing

## 📦 Implemented Structures

### ✅ Linear Data Structures
- `MyLinkedList` — singly linked list
- `MyRobustLinkedList` — safer linked list implementation
- `MyStack`, `MyStackLL` — stack (array + linked list)
- `MyQueue`, `MyQueueLL` — queue (array + linked list)

### ✅ Tree & Graph Structures
- `BinarySearchTree` — with iterator support
- `MyHeap` — priority queue (heap-based)
- `MyGraph` & `MyGraphMap` — unweighted graph
- `MyWeightedGraph` — weighted graph with Dijkstra’s algorithm

### ✅ Hashing & Tables
- `MyHashTable` — hash table with basic collision handling

### 🧠 Algorithms
- `SudokuSolver` — backtracking puzzle solver
- `ArithmeticExpressionEval` — expression parsing & evaluation
- `CharacterDatabase` + `ShowCharacter` — database simulation

## 📁 Project Structure

## 🎓 Educational Context
Originally built in high school (2024) as part of my AP Computer Science coursework.  
Each structure was implemented without external libraries to solidify understanding of how collections, graphs, and algorithms work under the hood.

## 🧠 What I Learned
- Pointer management and memory layout in Java
- Manual algorithm implementation (no built-in collections)
- Design trade-offs in graph and tree structures
- Functional thinking and recursive problem-solving

## 🧩 Notes
This repo isn’t optimized for production use — it's a **learning lab** that demonstrates a wide range of foundational CS knowledge.  
The codebase is clean, tested, and commented where helpful.

---
